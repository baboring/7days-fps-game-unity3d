{
	"Comments" : {
		"Project" : "FPS Test Project",
		"Version" : 1.0.0,
		"Date" : "2017/07/22",
		"Desc" : "<<<< Resource ID Configuration information >>>>>",
	}
	
	"OutFile" : "DataTableR.cs",
	"OutDir" : "../Assets/Resources",
	
	"Namespace" : "SB",
	"ClassName" : "R",

	"TableList": [
		{
			"fileCSV":"csv_Data/PropertyTable.csv", 
			"comment":"PropertyTable" },
		{
			"fileCSV":"csv_Data/SecureInfo.csv", 
			"comment":"SecureInfo" },
		{
			"fileCSV":"csv_Data/ConstantTable.csv", 
			"comment":"ConstantTable" },
	],	
	
	"BeginOfFile" : [
		"using System.IO;",
		"using System.Collections.Generic;",
		"#if ( UNITY_EDITOR || UNITY_4_0 || UNITY_4_1 || UNITY_4_2 || UNITY_4_3 || UNITY_4_4 || UNITY_4_5 || UNITY_4_6 || UNITY_4_7 || UNITY_4_8 || UNITY_4_9 )",
		"using UnityEngine;",
		"#endif",
		"using CSV;",
	], 
	
	"EndOfFile" : [
		"// end of class",
	],
	
	"variables & functions" : [
		"void  assert_( bool proposition, string szFormat = null, params object[] p ) {",
		"	if (!proposition)",
		"		throw new System.ApplicationException(\"internal error or data corrupt!\");",
		"}",
		"public delegate void AssertFunc( bool proposition, string szFormat = null, params object[] p );",
		"private AssertFunc Assert		{ get; set; }",
	],
	
	"Constructor initialization" : [
		"Assert = assert_;",
	],
	
	"CSVLoader" : "Asset",
	"LoadSystem" : {
		"FileSystem" : {
			"Ext" : ".csv",
			"Call" : "CSV.Loader.ReadCSV_FromFile",
			"FuncScript" : "",
		},
		"Asset" : {
			"Ext" : "",
			"Call" : "ReadCSV_FromAsset",
			"FuncScript" : [
				"		public static Dictionary<string, CSV.csvTable> ReadCSV_FromAsset(string szFileName) {",
				"				MemoryStream fs = null;",
				"				try {",
 				"					TextAsset txtAsset = UnityEngine.Resources.Load(szFileName) as TextAsset;",
				"					if(null != txtAsset) {",
				"						fs = new MemoryStream(txtAsset.bytes);",
				"						if (null != fs) {",
                "							var mapCSVTable = CSV.Loader.ReadCSVFromStream(fs);",
				"							fs.Close();"
                "							return mapCSVTable;",
				"						}",
				"					}",
				"				}",
				"				catch (System.Exception ex1) {",
				"					if (null != fs)",
				"						fs.Close();",
                "					throw ex1;",
				"				}",
				"				return null;",
				"		}",
			]
		}
		
	]
}